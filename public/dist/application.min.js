"use strict";var ApplicationConfiguration=function(){var applicationModuleName="buysell",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("bids"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("saleitems"),ApplicationConfiguration.registerModule("users"),angular.module("bids").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Bids","bids","dropdown","/bids(/create)?"),Menus.addSubMenuItem("topbar","bids","List Bids","bids",void 0,void 0,["buyer"],void 0)}]),angular.module("bids").config(["$stateProvider",function($stateProvider){$stateProvider.state("listBids",{url:"/bids",templateUrl:"modules/bids/views/list-bids.client.view.html"}).state("createBid",{url:"/bids/:saleitemId/create",templateUrl:"modules/bids/views/create-bid.client.view.html"}).state("viewBid",{url:"/bids/:bidId",templateUrl:"modules/bids/views/view-bid.client.view.html"}).state("editBid",{url:"/bids/:bidId/edit",templateUrl:"modules/bids/views/edit-bid.client.view.html"})}]),angular.module("bids").controller("BidsController",["$scope","$stateParams","$location","Authentication","Bids","$http",function($scope,$stateParams,$location,Authentication,Bids,$http){$scope.authentication=Authentication,$scope.create=function(){var bid=new Bids({amount:this.amount,saleItemId:$stateParams.saleitemId});bid.$save(function(response){$location.path("bids/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(bid){if(bid){bid.$remove();for(var i in $scope.bids)$scope.bids[i]===bid&&$scope.bids.splice(i,1)}else $scope.bid.$remove(function(){$location.path("bids")})},$scope.update=function(){var bid=$scope.bid;bid.$update(function(){$location.path("bids/"+bid._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.bids=Bids.query()},$scope.findByLogedInUser=function(){$http.get("bids/user/"+Authentication.user._id).success(function(data,status,headers,config){$scope.bids=data}).error(function(data,status,headers,config){$scope.error="Problem finding a user."})},$scope.findOne=function(){$scope.bid=Bids.get({bidId:$stateParams.bidId})}}]),angular.module("bids").factory("Bids",["$resource",function($resource){return $resource("bids/:bidId",{bidId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus","$http","$location",function($scope,Authentication,Menus,$http,$location){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.signout=function(){$http.get("/auth/signout").success(function(response){$scope.authentication.user=null,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("saleitems").run(["Menus","Authentication",function(Menus,Authentication){Menus.addMenuItem("topbar","Saleitems","saleitems","dropdown","/saleitems(/create)?"),Menus.addSubMenuItem("topbar","saleitems","List Saleitems","saleitems"),Menus.addSubMenuItem("topbar","saleitems","New Saleitem","saleitems/create",void 0,void 0,["seller"],void 0)}]),angular.module("saleitems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSaleitems",{url:"/saleitems",templateUrl:"modules/saleitems/views/list-saleitems.client.view.html"}).state("createSaleitem",{url:"/saleitems/create",templateUrl:"modules/saleitems/views/create-saleitem.client.view.html"}).state("viewSaleitem",{url:"/saleitems/:saleitemId",templateUrl:"modules/saleitems/views/view-saleitem.client.view.html"}).state("editSaleitem",{url:"/saleitems/:saleitemId/edit",templateUrl:"modules/saleitems/views/edit-saleitem.client.view.html"})}]),angular.module("saleitems").controller("SaleitemsController",["$scope","$stateParams","$location","Authentication","Saleitems",function($scope,$stateParams,$location,Authentication,Saleitems){$scope.authentication=Authentication,$scope.create=function(){var saleitem=new Saleitems({name:this.name,description:this.description,price:this.price});saleitem.$save(function(response){$location.path("saleitems/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(saleitem){if(saleitem){saleitem.$remove();for(var i in $scope.saleitems)$scope.saleitems[i]===saleitem&&$scope.saleitems.splice(i,1)}else $scope.saleitem.$remove(function(){$location.path("saleitems")})},$scope.update=function(){var saleitem=$scope.saleitem;saleitem.$update(function(){$location.path("saleitems/"+saleitem._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){Saleitems.query(function(data){Authentication.user.roles.indexOf("seller")>-1?$scope.saleitems=data.filter(function(element){return element.user?Authentication.user._id===element.user._id:!1}):$scope.saleitems=data})},$scope.findOne=function(){$scope.saleitem=Saleitems.get({saleitemId:$stateParams.saleitemId})}}]),angular.module("saleitems").factory("Saleitems",["$resource",function($resource){return $resource("saleitems/:saleitemId",{saleitemId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$scope.credentials.roles=[$scope.credentials.buyerSeller],$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);